//
//  main.m
//  OCMDTool
//
//  Created by yanguo sun on 24/11/2016.
//  Copyright © 2016 Lvmama. All rights reserved.
//

#import <Foundation/Foundation.h>
#import "MMMarkdown.h"
NSString * preprocessorJSCode();
//tip # Atx Style Headers 注意井号和title之间的空格，没有空格不会认为是title
int main(int argc, const char * argv[]) {
    @autoreleasepool {
        if (argc < 2) {
            NSLog(@"please give path!");
            return 1;
        }
        NSMutableArray *argvArray = [NSMutableArray new];
        for (int i=1; i<argc; i++) {
            NSString *aa =[NSString stringWithCString:argv[i] encoding:NSUTF8StringEncoding];
            if (!aa) {
                NSLog(@"argc error!");
                return 1;
            }
            [argvArray addObject:aa];
        }
        NSString *markdownPath = @"";
        NSInteger indexOf_p = [argvArray indexOfObject:@"-p"];
        if (indexOf_p == NSNotFound) {
            NSLog(@"please give path!");
            return 1;
        }
        NSString *firstParam =argvArray.firstObject;
        if ([firstParam isEqualToString:@"-p"]) {
            if (argvArray.count <= indexOf_p+1) {
                NSLog(@"please give path!");
                return 1;
            }
            markdownPath =argvArray[indexOf_p+1];
            if (markdownPath.length < 1) {
                NSLog(@"please give path!");
                return 1;
            }
            if (![markdownPath hasSuffix:@".md"]) {
                NSLog(@"please give .md path!");
                return 1;
            }
            
        }
        markdownPath = [markdownPath stringByStandardizingPath];
        
        NSString *markPath = [[markdownPath stringByDeletingPathExtension] lastPathComponent];
        NSString *markPath2 = [markdownPath stringByDeletingLastPathComponent];
        NSString *htmlPath = [[markPath2 stringByAppendingPathComponent:markPath] stringByAppendingPathExtension:@"html"];
        
        NSString *preprocessorJSCode22 = preprocessorJSCode();
        NSString *markString = [[NSString alloc] initWithContentsOfFile:markdownPath encoding:NSUTF8StringEncoding error:nil];
        NSData *data = [[NSData alloc] initWithBase64EncodedString:preprocessorJSCode22 options:NSDataBase64DecodingIgnoreUnknownCharacters];

        NSString *templeString = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];

        NSString *tableString = [MMMarkdown HTMLStringWithMarkdown:markString extensions:MMMarkdownExtensionsGitHubFlavored error:nil];
        NSString *htmlString = [templeString stringByReplacingOccurrencesOfString:@"{{tablePlaceHolder}}" withString:tableString];
        BOOL ret = [htmlString writeToFile:htmlPath atomically:NO encoding:NSUTF8StringEncoding error:nil];
        //{{tablePlaceHolder}}
        if (ret) {
            NSLog(@"over!");
        } else {
            NSLog(@"error!");
        }
    }
    return 0;
}


NSString * preprocessorJSCode(){
    NSString *ret = @"";
    return ret;
}

